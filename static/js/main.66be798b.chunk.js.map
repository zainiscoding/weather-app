{"version":3,"sources":["components/DisplayCitySearch.jsx","components/MapLocationContainer.js","components/DisplayError.jsx","components/DisplayWeatherCurrent.jsx","components/DisplayWeatherDaily.jsx","components/DisplayWeather.jsx","components/WeatherContainer.js","components/DisplayGithubLink.jsx","App.js","index.js"],"names":["DisplayCitySearch","props","id","type","placeholder","onChange","checkForEmptyLocation","onClick","getCoordinatesByCity","onMouseEnter","e","target","MapLocationContainer","getCurrentLocation","navigator","geolocation","getCurrentPosition","position","a","fetch","coords","latitude","longitude","mode","response","json","responseData","setLocation","city","console","log","setWeatherError","previousSibling","value","location","setWeather","matches","latt","longt","standard","useEffect","length","DisplayError","DisplayWeatherCurrent","Math","round","weather","current","temp","src","weatherIcon","alt","description","charAt","toUpperCase","slice","className","feels_like","humidity","uvi","DisplayWeatherDaily","daily","map","day","index","add","currentDay","days","indexOf","getMonth","getDate","icon","max","min","DisplayWeather","weatherError","undefined","loadingIcon","changeUnits","WeatherContainer","useState","units","setUnits","setWeatherIcon","setCurrentDay","initialRender","useRef","apiKey","process","faSnowflake","size","today","Date","setWeatherData","weatherData","weatherDataWeather","ok","getWeather","DisplayGithubLink","href","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.66be798b.chunk.js","sourcesContent":["const DisplayCitySearch = (props) => {\n  return (\n    <div id='city-search-wrapper'>\n      <div id='city-search-wrapper__inputs-wrapper'>\n        <div id='city-search-wrapper__inputs-wrapper__clearbox'>\n          <input\n            id='city-search-wrapper__search-bar'\n            type='text'\n            placeholder='Enter a city'\n            onChange={props.checkForEmptyLocation}\n          ></input>\n          <button\n            id='city-search-wrapper__search-button'\n            onClick={props.getCoordinatesByCity}\n            onMouseEnter={(e) =>\n              (e.target.id = 'city-search-wrapper__search-button--color')\n            }\n          >\n            Search\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DisplayCitySearch;\n","import { useEffect } from 'react';\nimport DisplayCitySearch from './DisplayCitySearch';\n\nconst MapLocationContainer = (props) => {\n  //Get the current coordinates and update the state\n  function getCurrentLocation() {\n    navigator.geolocation.getCurrentPosition(async (position) => {\n      try {\n        //Get the city name based on current coordinates\n        const response = await fetch(\n          `https://geocode.xyz/${position.coords.latitude},${position.coords.longitude}?geoit=json`,\n          { mode: 'cors' }\n        );\n        const responseData = await response.json();\n        props.setLocation({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n          city: `${responseData.city}`,\n        });\n      } catch (err) {\n        console.log(err);\n        props.setWeatherError(true);\n      }\n    });\n  }\n\n  //Find the coordinates of a city and set the location to that city\n  async function getCoordinatesByCity(e) {\n    if (\n      e.target.previousSibling !== null &&\n      e.target.previousSibling.value !== props.location.city\n    ) {\n      console.log(e.target.previousSibling.value);\n      //This is called here to display the loading spinner while waiting for the fetch below\n      props.setWeather();\n      try {\n        const response = await fetch(\n          `https://geocode.xyz/${e.target.previousSibling.value}?json=1`,\n          { mode: 'cors' }\n        );\n        const responseData = await response.json();\n        if (responseData.matches === null) {\n          throw props.setWeatherError(true);\n        } else {\n          props.setLocation({\n            latitude: responseData.latt,\n            longitude: responseData.longt,\n            city: responseData.standard.city,\n          });\n        }\n      } catch (err) {\n        console.log(err);\n        props.setWeatherError(true);\n      }\n    }\n  }\n\n  //If input is empty, switch to coordinates\n  function checkForEmptyLocation(e) {\n    if (e.target.value.length === 0) {\n      getCurrentLocation();\n    }\n  }\n\n  //Get coordinates on first load\n  useEffect(() => {\n    getCurrentLocation();\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <>\n      <DisplayCitySearch\n        getCoordinatesByCity={getCoordinatesByCity}\n        checkForEmptyLocation={checkForEmptyLocation}\n      />\n    </>\n  );\n};\n\nexport default MapLocationContainer;\n","function DisplayError() {\n  return (\n    <div id='display-weather-error-wrapper'>\n      <h2>\n        Sorry, we can't seem to find the weather for your area. Please check the\n        city name.\n      </h2>\n    </div>\n  );\n}\n\nexport default DisplayError;\n","const DisplayWeatherCurrent = (props) => {\n  return (\n    <div id='display-weather-wrapper__current-weather'>\n      <div id='display-weather-wrapper__degrees-wrapper'>\n        {props.city !== 'undefined' && (\n          <h2 id='current-temp-text'>\n            It's {Math.round(props.weather.current.temp)}° in {props.city}.\n          </h2>\n        )}\n        {props.city === 'undefined' && (\n          <h2>It's {Math.round(props.weather.current.temp)}° in your city.</h2>\n        )}\n      </div>\n      <div id='current-weather__icon-description-wrapper'>\n        <img src={props.weatherIcon} alt='current weather icon' />\n        <p>\n          {props.weather.current.weather[0].description\n            .charAt(0)\n            .toUpperCase() +\n            props.weather.current.weather[0].description.slice(1)}\n        </p>\n      </div>\n      <div id='current-weather__details-box'>\n        <div className='details-box__detail'>\n          <p className='detail__text'>\n            Feels like: {Math.round(props.weather.current.feels_like)}°\n          </p>\n        </div>\n        <div className='details-box__detail'>\n          <p className='detail__text'>\n            Humidity: {props.weather.current.humidity}%\n          </p>\n        </div>\n        <div className='details-box__detail'>\n          <p className='detail__text'>UV Index: {props.weather.current.uvi}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DisplayWeatherCurrent;\n","import { add } from 'date-fns';\n\nconst DisplayWeatherDaily = (props) => {\n  return (\n    <>\n      <h3 id='daily-weather__title'>8-day Forecast</h3>\n      <div id='display-weather-wrapper__daily-weather'>\n        <div id='daily-weather__carousel'>\n          <div id='carousel__daily-weather'>\n            {props.weather.daily.map((day, index) => {\n              return (\n                <div className='display-weather-wrapper__day' key={index}>\n                  <p>\n                    {add(props.currentDay, {\n                      days: props.weather.daily.indexOf(day),\n                    }).getMonth() + 1}\n                    /\n                    {add(props.currentDay, {\n                      days: props.weather.daily.indexOf(day),\n                    }).getDate() + 1}\n                  </p>\n                  <img\n                    src={\n                      'https://openweathermap.org/img/wn/' +\n                      day.weather[0].icon +\n                      '.png'\n                    }\n                    alt='Day weather icon'\n                  />\n                  <div id='daily-weather__details-box'>\n                    <div className='details-box__detail'>\n                      <p className='detail__text'>\n                        {Math.round(day.temp.max)}° / {Math.round(day.temp.min)}\n                        °\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DisplayWeatherDaily;\n","import DisplayError from './DisplayError';\nimport DisplayWeatherCurrent from './DisplayWeatherCurrent';\nimport DisplayWeatherDaily from './DisplayWeatherDaily';\n\nconst DisplayWeather = (props) => {\n  return (\n    <>\n      {props.weatherError === true && <DisplayError />}\n      {props.weatherError === false && (\n        <div id='display-weather-wrapper'>\n          {props.weather === undefined && props.loadingIcon}\n          {props.weather !== undefined && (\n            <>\n              <DisplayWeatherCurrent\n                weather={props.weather}\n                weatherIcon={props.weatherIcon}\n                city={props.location.city}\n              />\n              <DisplayWeatherDaily\n                weather={props.weather}\n                weatherIcon={props.weatherIcon}\n                currentDay={props.currentDay}\n              />\n              <button\n                id='display-weather-wrapper__change-units-button'\n                onMouseEnter={(e) =>\n                  (e.target.id =\n                    'display-weather-wrapper__change-units-button--color')\n                }\n                onClick={props.changeUnits}\n              >\n                °C / °F\n              </button>\n            </>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default DisplayWeather;\n","import { useEffect, useRef, useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSnowflake } from '@fortawesome/free-solid-svg-icons';\nimport DisplayWeather from './DisplayWeather';\n\nconst WeatherContainer = (props) => {\n  const [units, setUnits] = useState('metric');\n  const [weatherIcon, setWeatherIcon] = useState('');\n  const [currentDay, setCurrentDay] = useState('');\n\n  const initialRender = useRef(true);\n  const apiKey = process.env.REACT_APP_API_KEY;\n  const loadingIcon = (\n    <FontAwesomeIcon icon={faSnowflake} size='4x' className='fa-spin' />\n  );\n  const today = new Date();\n\n  //If it's the first render, set 'intialRender' to false. Otherwise, get the current weather\n  useEffect(() => {\n    if (initialRender.current) {\n      initialRender.current = false;\n    } else {\n      getWeather();\n      setCurrentDay(today);\n    }\n    // eslint-disable-next-line\n  }, [props.location, units]);\n\n  async function setWeatherData(response) {\n    const weatherData = await response.json();\n    props.setWeather(weatherData);\n    const weatherDataWeather = weatherData.current.weather[0];\n\n    if (weatherDataWeather.icon === undefined) {\n      setWeatherIcon('Loading...');\n    }\n    setWeatherIcon(\n      'https://openweathermap.org/img/wn/' + weatherDataWeather.icon + '@2x.png'\n    );\n    props.setWeatherError(false);\n  }\n\n  async function getWeather() {\n    try {\n      const response = await fetch(\n        `https://api.openweathermap.org/data/2.5/onecall?lat=${props.location.latitude}&lon=${props.location.longitude}&exclude=minutely,alerts&units=${units}&appid=${apiKey}`,\n        { mode: 'cors' }\n      );\n      if (response.ok === false) {\n        throw props.setWeatherError(true);\n      } else {\n        setWeatherData(response);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Switch from metric to imperial\n  async function changeUnits() {\n    if (units === 'metric') {\n      setUnits('imperial');\n    } else {\n      setUnits('metric');\n    }\n  }\n\n  return (\n    <>\n      <DisplayWeather\n        weather={props.weather}\n        changeUnits={changeUnits}\n        weatherIcon={weatherIcon}\n        loadingIcon={loadingIcon}\n        weatherError={props.weatherError}\n        location={props.location}\n        currentDay={currentDay}\n      />\n    </>\n  );\n};\n\nexport default WeatherContainer;\n","function DisplayGithubLink() {\n  return (\n    <div id='display-github-link-wrapper'>\n      <a href='https://github.com/zainiscoding/weather-app' target=' '>\n        View on GitHub\n      </a>\n    </div>\n  );\n}\n\nexport default DisplayGithubLink;\n","import { useState } from 'react';\nimport MapLocationContainer from './components/MapLocationContainer';\nimport WeatherContainer from './components/WeatherContainer';\nimport DisplayGithubLink from './components/DisplayGithubLink';\nimport './styles/reset.css';\nimport './styles/main.css';\n\nconst App = () => {\n  const [location, setLocation] = useState({});\n  const [weather, setWeather] = useState();\n  const [weatherError, setWeatherError] = useState(false);\n\n  return (\n    <div id='App'>\n      <MapLocationContainer\n        location={location}\n        setLocation={setLocation}\n        setWeather={setWeather}\n        setWeatherError={setWeatherError}\n      />\n      <WeatherContainer\n        weather={weather}\n        setWeather={setWeather}\n        location={location}\n        weatherError={weatherError}\n        setWeatherError={setWeatherError}\n      />\n      <DisplayGithubLink />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}